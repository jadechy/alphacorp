name: CI/CD Pipeline for Dev

on:
  push:
    branches:
      - main  
  pull_request:
    branches:
      - main   

jobs:
  build:
    runs-on: ubuntu-latest  # Utilise un runner Ubuntu

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: mydatabase
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=5s --health-timeout=2s --health-retries=10

    steps:
    # 1. Étape de récupération du code source
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. Étape de mise en place de Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # 3. Étape pour construire et exécuter les services Docker
    - name: Build and run Docker containers
      run: |
        docker-compose -f docker-compose.yml up --build -d

    # 4. Étape pour exécuter les tests (ici avec PHPUnit par exemple)
    - name: Run tests
      run: |
        docker-compose exec php vendor/bin/phpunit --color=always

    # 5. Étape pour arrêter et nettoyer les services Docker
    - name: Stop Docker containers
      run: docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Cette étape dépend de l'étape de build pour s'exécuter

    if: github.ref == 'refs/heads/main'  # Déploiement uniquement pour la branche dev

    steps:
      # 1. Étape pour se connecter à ton VPS via SSH et déployer le code
      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" | ssh-add -
          ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << 'EOF'
            cd /path/to/your/project
            git pull origin dev
            docker-compose up --build -d
          EOF
